---
# Main Entry Point for asymworks.docker

# Run Distribution-Specific Tasks
- import_tasks: main-alpine.yaml
  when: ansible_facts['os_family']|lower == 'alpine'

- import_tasks: main-debian.yaml
  when: ansible_facts['os_family']|lower == 'debian' and ansible_facts['distribution']|lower == 'debian'

- import_tasks: main-ubuntu.yaml
  when: ansible_facts['os_family']|lower == 'debian' and ansible_facts['distribution']|lower == 'ubuntu'

# Add ansible User to Docker Group
- name: Docker | Add User to Docker Group
  ansible.builtin.user:
    name: ansible
    groups: docker
    append: true

- name: Docker | Check Configuration Directory
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Docker | Update Daemon Configuration
  ansible.builtin.template:
    src: etc/docker/daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: Docker | Restart Docker

# Start Docker Daemon
- name: Docker | Start Docker
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started

# Install Python Docker SDK
- name: Docker | Install Docker Module for Python
  ansible.builtin.pip:
    name: docker

# Slurp Docker Daemon Configuration
- name: Docker | Read Configuration
  block:
    - slurp:
        src: /etc/docker/daemon.json
      register: slurped
    - set_fact:
        daemon_json: '{{ slurped.content | b64decode | from_json }}'

# Disable Docker IPv6
- name: Docker | Disable IPv6
  when: not docker_ipv6
  block:
    - name: Docker (IPv6) | Remove IPv6 NAT
      when: docker_ipv6_network == 'default'
      community.docker.docker_container:
        name: ipv6nat
        state: absent

    - name: Docker (IPv6) | Remove IPv6 Network
      when: docker_ipv6_network != 'default'
      community.docker.docker_network:
        name: "{{ docker_ipv6_network }}"
        state: absent

    - name: Docker (IPv6) | Disable Daemon IPv6
      block:
        - set_fact:
            daemon_json: '{{
              daemon_json
              | dict2items
              | rejectattr("key", "match", "^(ipv6|fixed-cidr-v6|userland-proxy)$")
              | items2dict
            }}'

# Enable Docker IPv6
- name: Docker | Enable IPv6
  when: docker_ipv6
  block:
    - name: Docker (IPv6) | Setup IPv6 Network
      when: docker_ipv6_network != 'default'
      community.docker.docker_network:
        name: "{{ docker_ipv6_network }}"
        enable_ipv6: true
        ipam_config:
          - subnet: "{{ docker_ipv6_subnet }}"

    - name: Docker (IPv6) | Install IPv6 NAT
      when: docker_ipv6_network == 'default'
      community.docker.docker_container:
        name: ipv6nat
        image: robbertkl/ipv6nat:0.4.4
        network_mode: host
        cap_drop:
          - ALL
        capabilities:
          - NET_RAW
          - NET_ADMIN
          - SYS_MODULE
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /lib/modules:/lib/modules:ro
        labels:
          diun.enable: "true"
        pull: "{{ docker_upgrade_images | default(false) | bool }}"
        restart_policy: always
        container_default_behavior: compatibility
        state: started

    - name: Docker (IPv6) | Enable Daemon IPv6
      set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "ipv6": true,
              "userland-proxy": (not docker_ipv6_nat)|bool,
              "fixed-cidr-v6": docker_ipv6_subnet|default("fd00::/80"),
            })
        }}'

# Configure Loki Logging Plugin
- name: Docker | Enable Loki Logging
  when: docker_loki_enabled is defined and docker_loki_enabled
  block:
    - name: Docker | Install Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: present

    - name: Docker | Enable Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: enabled

    - name: Docker | Enable Daemon Loki Logging
      set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "log-driver": "loki",
              "log-options": {
                "loki-url": docker_loki_url,
              } | combine(docker_loki_opts|default({}))
            }
          )
        }}'

- name: Docker | Disable Loki Logging
  when: docker_loki_enabled is not defined or not docker_loki_enabled
  block:
    - name: Docker | Uninstall Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: absent

    - name: Docker | Disable Daemon Loki Logging
      set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "log-driver": "json-file",
              "log-options": {
                "max-file": "3",
                "max-size": "50m",
                "mode": "non-blocking",
            }
          )
        }}'

# Write Daemon Configuration
- name: Docker | Write Daemon Configuration
  ansible.builtin.copy:
    content: "{{ daemon_json | to_nice_json(indent=2) }}"
    dest: /etc/docker/daemon.json

# Configure Telegraf
- name: Docker | Configure Telegraf
  when: telegraf_enabled is defined and telegraf_enabled and docker_telegraf
  block:
    - name: Docker | Add Telegraf User to Docker Group
      ansible.builtin.user:
        name: telegraf
        groups: docker
        append: true

    - name: Docker | Check Telegraf Directory
      ansible.builtin.file:
        path: "{{ telegraf_conf_d_path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Docker | Active Telegraf Inputs
      ansible.builtin.template:
        src: etc/telegraf.conf.d/20-docker.conf.j2
        dest: "{{ telegraf_conf_d_path }}/20-docker.conf"
        mode: '0644'
      notify: Telegraf | Restart Agent

- name: Docker | Remove Telegraf
  when: telegraf_enabled is not defined or not telegraf_enabled or not docker_telegraf
  block:
    - name: Docker | Deactivaate Telegraf Inputs
      ansible.builtin.file:
        path: "{{ telegraf_conf_d_path }}/20-docker.conf"
        state: absent

# Configure Logspout
- name: Docker (LogSpout) | Setup Container
  community.docker.docker_container:
    name: logspout
    image: "gliderlabs/logspout:{{ logspout_tag }}"
    hostname: "{{ ansible_hostname }}"
    volumes:
      - /etc/hostname:/etc/hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env:
      BACKLOG: "{{ logspout_backlog }}"
      RAW_FORMAT: "{{ logspout_format }}"
    labels:
      diun.enable: "{{ diun_enabled|bool|string }}"
    pull: "{{ docker_upgrade_images | default(false) | bool }}"
    command: multiline+udp://logs.lan.kraussnet.com:5000
    restart_policy: unless-stopped
    container_default_behavior: compatibility
    state: "{{ 'started' if logspout_enabled else 'absent' }}"

# Configure Diun
- name: Docker (Diun) | Setup Container
  community.docker.docker_container:
    name: diun
    image: "crazymax/diun:{{ diun_tag }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env:
      TZ: "{{ timezone }}"
      LOG_LEVEL: info
      LOG_JSON: "false"
      DIUN_WATCH_WORKERS: "{{ diun_watch_workers }}"
      DIUN_WATCH_SCHEDULE: "{{ diun_watch_schedule }}"
      DIUN_PROVIDERS_DOCKER: "true"
      DIUN_PROVIDERS_DOCKER_WATCHSTOPPED: "{{ diun_watch_stopped }}"
      DIUN_NOTIF_MAIL_HOST: "{{ diun_notif_mail_host }}"
      DIUN_NOTIF_MAIL_PORT: "{{ diun_notif_mail_port }}"
      DIUN_NOTIF_MAIL_LOCALNAME: "{{ diun_notif_mail_localname }}"
      DIUN_NOTIF_MAIL_FROM: "{{ diun_notif_mail_from }}"
      DIUN_NOTIF_MAIL_TO: "{{ diun_notif_mail_to }}"
    pull: "{{ docker_upgrade_images | default(false) | bool }}"
    container_default_behavior: compatibility
    restart_policy: unless-stopped
    state: "{{ 'started' if diun_enabled else 'absent' }}"

# Configure Traefik
- name: Docker (Traefik) | Create Directories
  when: traefik_enabled
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - /srv/traefik
    - /srv/traefik/acme
    - /srv/traefik/certs
    - /srv/traefik/conf.d
    - "{{ traefik_access_log_path }}"

- name: Docker (Traefik) | Copy Configuration
  when: traefik_enabled
  ansible.builtin.template:
    src: "srv/traefik/traefik.yml.j2"
    dest: /srv/traefik/traefik.yml
    owner: root
    group: root
    mode: '0644'
  notify: Docker (Traefik) | Restart Traefik

- name: Docker (Traefik) | Setup Docker Network
  community.docker.docker_network:
    name: "{{ traefik_network }}"
    state: "{{ 'present' if traefik_enabled else 'absent' }}"

- name: Docker (Traefik) | Setup Docker Container
  community.docker.docker_container:
    name: traefik
    image: "traefik:{{ traefik_tag }}"
    security_opts:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - /srv/traefik/acme:/etc/traefik/acme:rw
      - /srv/traefik/certs:/etc/traefik/certs:rw
      - /srv/traefik/conf.d:/etc/traefik/conf.d:ro
      - /var/log/traefik:/var/log:rw
    published_ports: "{{ traefik_docker_ports }}"
    network_mode: default
    networks:
      - name: bridge
      - name: "{{ traefik_network }}"
    labels:
      diun.enable: "{{ diun_enabled|bool|string }}"
    pull: "{{ docker_upgrade_images | default(false) | bool }}"
    restart_policy: unless-stopped
    container_default_behavior: compatibility
    state: "{{ 'started' if traefik_enabled else 'absent' }}"

- name: Docker (Traefik) | Check fail2ban Directories
  when: traefik_enabled and traefik_fail2ban_enabled
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_list:
    - /etc/fail2ban
    - /etc/fail2ban/filter.d
    - /etc/fail2ban/jail.d

- name: Docker (Traefik) | Install fail2ban Filters
  when: traefik_enabled and traefik_fail2ban_enabled
  ansible.builtin.copy:
    src: "etc/fail2ban/filter.d/{{ item }}"
    dest: "/etc/fail2ban/filter.d/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  with_list:
    - traefik-auth.conf

- name: Docker (Traefik) | Check for fail2ban Jail Configuration
  when: traefik_enabled and traefik_fail2ban_enabled
  ansible.builtin.stat:
    path: /etc/fail2ban/jail.d/traefik.conf
  register: traefik_jail
  check_mode: false

- name: Docker (Traefik) | Install Traefik fail2ban Jail Configuration
  when: traefik_enabled and traefik_fail2ban_enabled and not traefik_jail.stat.exists
  ansible.builtin.template:
    src: "etc/fail2ban/jail.d/traefik.conf.j2"
    dest: "/etc/fail2ban/jail.d/traefik.conf"
    owner: root
    group: root
    mode: '0644'

- name: Docker (Traefik) | Install Logrotate Configuration
  when: traefik_logrotate_enabled
  ansible.builtin.template:
    src: "etc/logrotate.d/traefik.j2"
    dest: "/etc/logrotate.d/traefik"
    owner: root
    group: root
    mode: '0644'

- name: Docker (Traefik) | Remove logrotate Configuration
  when: not traefik_logrotate_enabled
  ansible.builtin.file:
    path: /etc/logrotate.d/traefik
    state: absent
